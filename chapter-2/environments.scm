#lang eopl
(define (apply-generic op arg)
  (arg op))
(define (empty? env)
  (apply-generic 'empty? env))
(define (env->var env)
  (apply-generic 'env->var env))
(define (env->val env)
  (apply-generic 'env->val env))
(define (env->sub-env env)
  (apply-generic 'env->sub-env env))
(define (extend-env var val env)
  ((apply-generic 'extender env) var val env))
(define (empty-env)
  (alist-env '()))
(define (apply-env env search-var)
  (define (apply-non-empty env search-var)
    (if (eqv? (env->var env)
              search-var)
        (list 'some (env->val env))
        (apply-env (env->sub-env env) search-var)))
  (cond
    ((empty? env) '(none))
    (else (apply-non-empty env search-var))))
(define (has-binding? env var)
  (if (empty? env)
      #f
      (or (eqv? (env->var env) var)
          (has-binding? (env->sub-env env) var))))
(define (extend-env* vars vals env)
  ((apply-generic 'extender* env) vars vals env))
(define (alist-env lst)
  (define (dispatch op)
    (define extender*
      (lambda (vars vals env)
        ; rightwards fold
        (if (or (null? vars)
                (null? vals))
            env
            (extender* (cdr vars)
                       (cdr vals)
                       (extend-env (car vars)
                                   (car vals)
                                   env)))))
    (define extender
      (lambda (var val env)
        (alist-env (list (cons var val) env))))
    (cond
      ((eqv? 'empty? op) (null? lst))
      ((eqv? 'env->var op) (car (car lst)))
      ((eqv? 'env->val op) (cdr (car lst)))
      ((eqv? 'env->sub-env op) (list-ref lst 1))
      ((eqv? 'extender op) extender)
      ((eqv? 'extender* op) extender*)
      (else (eopl:error 'alist-env "Unknown method"))))
  dispatch)
(define (rib-cage-env box)
  (define (dispatch op)
    (define (extend-env var val env)
      (rib-cage-env
       (cons (cons (list var)
                   (list val))
             env)))
    (define (extend-env* vars vals env)
      (rib-cage-env
       (cons (cons vars vals) env)))
    (define (apply-env env search-var)
      (define (apply-env-non-empty env search-var)
        (define (apply-top-level env search-var)
          (define (apply-rib vars vals search-var)
            (if (null? vars)
                '()
                (if (eqv? (car vars) search-var)
                    (car vals)
                    (apply-rib (cdr vars)
                               (cdr vals)
                               search-var))))
          (apply-rib (car env)))
        (let ((top-level (apply-top-level env search-var)))
          (if (null? top-level)
              (apply-env (env->sub-env env) search-var)
              top-level)))
      (if (empty? env)
          '(none)
          (apply-env-non-empty env search-var)))
    (cond
      ((eqv? 'empty? op) (null? box))
      ((eqv? 'extend-env op) extend-env)
      ((eqv? 'apply-env op) apply-env)
      ((eqv? 'extend-env* op) extend-env*)
      (else (eopl:error 'rib-cage-env "Unknown method"))))
  dispatch)