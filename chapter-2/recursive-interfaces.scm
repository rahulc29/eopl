#lang eopl
(define (var-exp var)
  var)
(define (lambda-exp var body)
  (list 'lambda (list var) body))
(define (app-exp rator rand)
  (list rator rand))
(define (var-exp? exp)
  (symbol? exp))
(define (lambda-exp? exp)
  (eqv? 'lambda (car exp)))
(define (app-exp? exp)
  (and (not (var-exp? exp))
       (not (lambda-exp? exp))))
(define (var-exp->var exp)
  exp)
(define (lambda-exp->bound-var exp)
  (car (list-ref exp 1)))
(define (lambda-exp->body exp)
  (list-ref exp 2))
(define (app-exp->rator exp)
  (list-ref exp 0))
(define (app-exp->rand exp)
  (list-ref exp 1))
(define (occurs-free? search-var exp)
  (cond
    ((var-exp? exp) (eqv? search-var (var-exp->var exp)))
    ((lambda-exp? exp)
     (and (not (eqv? search-var (lambda-exp->bound-var exp)))
          (occurs-free? search-var (lambda-exp->body exp))))
    (else
     (or (occurs-free? search-var (app-exp->rator exp))
         (occurs-free? search-var (app-exp->rand exp))))))