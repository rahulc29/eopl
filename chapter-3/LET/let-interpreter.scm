#lang eopl
(require "procedural-environment.scm")
(require "let-parser.scm")
(require "syntax-tree.scm")
(define (num-val int)
  (int-exp int))
(define (bool-val bool)
  (bool-exp bool))
(define (expval->num exp)
  (cases program exp
    (int-exp (val) (list 'some val))
    (else '(none))))
(define (expval->bool exp)
  (cases program exp
    (bool-exp (val) (list 'some val))
    (else '(none))))
(define (value-of exp env)
  (define (extract-binary op)
    (cond
      ((eqv? op '+)
       (lambda (x y) (+ x y)))
      ((eqv? op '*)
       (lambda (x y) (* x y)))
      ((eqv? op '-)
       (lambda (x y) (- x y)))
      ((eqv? op 'equals?)
       (lambda (x y) (= x y)))
      ((eqv? op 'greater?)
       (lambda (x y) (> x y)))
      ((eqv? op 'less?)
       (lambda (x y) (< x y)))
      ((eqv? op 'cons)
       cons)))
  (define (extract-unary op)
    (cond
      ((eqv? op 'negate)
       (lambda (x) (- x)))
      ((eqv? op 'zero?)
       (lambda (x) (zero? x)))
      ((eqv? op 'car) car)
      ((eqv? op 'cdr) cdr)))
  (define (extract-nullary op)
    (cond
      ((eqv? op 'emptylist) '())))
  (define (extract-nary op)
    (define (list-evaluator args env)
      (map (lambda (arg) (value-of arg env)) args))
    (define (cond-evaluator conds env)
      (define (extract-predicate cond-cell)
        (list-ref cond-cell 0))
      (define (extract-expression cond-cell)
        (list-ref cond-cell 1))
      (if (value-of (extract-predicate (car conds)) env)
          (value-of (extract-expression (car conds)) env)
          (cond-evaluator (cdr conds) env)))
    (cond
      ((eqv? op 'list) list-evaluator)
      ((eqv? op 'cond) cond-evaluator)))
  (cases program exp
    (int-exp (val) val)
    (bool-exp (val) val)
    (var-exp (var) (apply-env env var))
    (binop-exp (op left right) ((extract-binary op)
                                (value-of left env)
                                (value-of right env)))
    (unary-op-exp (op arg) ((extract-unary op)
                            (value-of arg env)))
    (nary-exp (op args) ((extract-nary op) args env))
    (if-exp (cond then else)
            (if (value-of cond env)
                (value-of then env)
                (value-of else env)))
    (nullary-op-exp (op)
                    (extract-nullary op))
    (let-exp (var val in)
             (value-of in (extend-env var (value-of val env)
                                      env)))))
(define (run program)
  (value-of (parse-tree program) (empty-env)))