#lang eopl
(require "procedural-environment.scm")
(require "let-parser.scm")
(require "syntax-tree.scm")
(define (num-val int)
  (int-exp int))
(define (bool-val bool)
  (bool-exp bool))
(define (expval->num exp)
  (cases program exp
    (int-exp (val) (list 'some val))
    (else '(none))))
(define (expval->bool exp)
  (cases program exp
    (bool-exp (val) (list 'some val))
    (else '(none))))
(define (value-of exp env)
  (cases program exp
    (int-exp (val) val)
    (bool-exp (val) val)
    (var-exp (var) (apply-env env var))
    (diff-exp (left right) (num-val (- (value-of left env)
                                       (value-of right env))))
    (zero?-exp (val) (zero? (value-of val env)))
    (if-exp (cond then else)
            (if (value-of cond env)
                (value-of then env)
                (value-of else env)))
    (let-exp (var val in)
             (value-of in (extend-env var (value-of val env)
                                      env)))))
