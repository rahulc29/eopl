#lang eopl
(require "syntax-tree.scm")
(define (parse-tree tree)
  (define (parse-pair tree)
    (define (parse-let tree)
      (define (extract-let-var tree)
        (list-ref (list-ref tree 1) 0))
      (define (extract-let-expr tree)
        (list-ref (list-ref tree 1) 1))
      (define (extract-let-body tree)
        (list-ref tree 2))
      (let-exp (extract-let-var tree)
               (parse-tree (extract-let-expr tree))
               (parse-tree (extract-let-body tree))))
    (let ((head (car tree)))
      (cond
        ((eqv? '- head) (diff-exp (parse-tree (list-ref tree 1))
                                  (parse-tree (list-ref tree 2))))
        ((eqv? 'zero? head) (zero?-exp (parse-tree (list-ref tree 1))))
        ((eqv? 'if head) (if-exp (parse-tree (list-ref tree 1))
                                 (parse-tree (list-ref tree 2))
                                 (parse-tree (list-ref tree 3))))
        ((eqv? 'let head) (parse-let tree))
        (else (eopl:error 'parse-tree "Invalid syntax")))))
  (cond
    ((null? tree) (eopl:error 'parse-tree "Empty string"))
    ((pair? tree) (parse-pair tree))
    ((number? tree) (int-exp tree))
    ((symbol? tree) (var-exp tree))
    ((eqv? 'true tree) (bool-exp #t))
    ((eqv? 'false tree) (bool-exp #f))
    (else (int-exp tree))))
(provide parse-tree)